name: Update Adobe Downloader Cask

on:
  schedule:
    # 每天北京时间 07:12、13:27、19:42 检查更新（UTC 时间 23:12、05:27、11:42）
    - cron: "12 23 * * *"
    - cron: "27 5 * * *"
    - cron: "42 11 * * *"
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-adobe-downloader.yml'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-adobe-downloader
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # GitHub CLI is pre-installed on GitHub Actions runners

      - name: Check for new version
        id: check
        run: |
          # 获取当前 cask 中的版本
          CURRENT_VERSION=$(grep -E 'version "[0-9.]+"' Casks/adobe-downloader.rb | sed -E 's/.*version "(.*)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # 从 GitHub API 获取最新版本信息
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/X1a0He/Adobe-Downloader/releases/latest)
          
          # 调试：打印 API 响应的前 500 个字符
          echo "API Response (first 500 chars): ${LATEST_RELEASE:0:500}"
          
          # 检查是否有 API 错误
          if echo "$LATEST_RELEASE" | jq -e '.message' > /dev/null 2>&1; then
            echo "GitHub API Error: $(echo "$LATEST_RELEASE" | jq -r '.message')"
            exit 1
          fi
          
          LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name // empty')
          
          # 如果版本号带有 v 前缀，去掉它
          LATEST_VERSION=${LATEST_VERSION#v}
          
          echo "Latest version: $LATEST_VERSION"
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "Could not determine latest version"
            echo "Full API response:"
            echo "$LATEST_RELEASE"
            exit 1
          fi
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New version available: $LATEST_VERSION"
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=true" >> $GITHUB_OUTPUT
            
            # 获取下载 URL
            DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".dmg")) | .browser_download_url')
            echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          else
            echo "Already up to date"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update cask file and README
        if: steps.check.outputs.update_needed == 'true'
        run: |
          NEW_VERSION=${{ steps.check.outputs.new_version }}
          DOWNLOAD_URL=${{ steps.check.outputs.download_url }}
          
          # 下载新版本文件以计算 SHA256
          echo "Downloading from: $DOWNLOAD_URL"
          curl -L -o adobe_downloader_new.dmg "$DOWNLOAD_URL"
          
          # 计算 SHA256
          NEW_SHA256=$(sha256sum adobe_downloader_new.dmg | cut -d' ' -f1)
          echo "New SHA256: $NEW_SHA256"
          
          # 更新 cask 文件
          sed -i "s/version \".*\"/version \"$NEW_VERSION\"/" Casks/adobe-downloader.rb
          sed -i "s/sha256 \".*\"/sha256 \"$NEW_SHA256\"/" Casks/adobe-downloader.rb

          # 更新 README.md 中的版本号
          sed -i "s/| 🎨 Adobe Downloader | \`adobe-downloader\` | [^|]* |/| 🎨 Adobe Downloader | \`adobe-downloader\` | $NEW_VERSION |/" README.md

          # 清理下载的文件
          rm adobe_downloader_new.dmg

      - name: Test updated files
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # 检查 Ruby 语法
          ruby -c Casks/adobe-downloader.rb
          echo "Cask syntax is valid"

          # 验证 README.md 更新
          grep "🎨 Adobe Downloader" README.md
          echo "README.md updated successfully"

      - name: Commit and push changes
        if: steps.check.outputs.update_needed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add Casks/adobe-downloader.rb README.md
          git commit -m "chore: update Adobe Downloader to version ${{ steps.check.outputs.new_version }}

          - Updated version from ${{ steps.check.outputs.current_version }} to ${{ steps.check.outputs.new_version }}
          - Updated SHA256 checksum
          - Updated README.md version table
          - Source: https://github.com/X1a0He/Adobe-Downloader/releases/tag/${{ steps.check.outputs.new_version }}"
          
          git push
