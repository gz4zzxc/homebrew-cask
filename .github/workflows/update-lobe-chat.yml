name: Update Lobe Chat Cask

on:
  schedule:
    - cron: "12 23 * * *"  # Âåó‰∫¨Êó∂Èó¥ 07:12 ÊØèÊó•Ê£ÄÊü•
  workflow_dispatch: {}

permissions:
  contents: write
  actions: read      # ËØªÂèñÂÖ∂‰ªñ workflow Áä∂ÊÄÅ

concurrency:
  group: update-lobe-chat-manual
  cancel-in-progress: true

jobs:
  update:
    runs-on: macos-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      # Ê£ÄÊü•ÊòØÂê¶ÊúâÂÖ∂‰ªñÊõ¥Êñ∞Ê≠£Âú®ËøõË°å
      - name: Check for running updates
        id: check-running
        run: |
          echo "::group::Checking for running updates"
          RUNNING_COUNT=$(gh run list --workflow="Update Lobe Chat Cask" --status=in_progress --limit=10 --json status --jq '.[] | select(.status == "in_progress") | .status' | wc -l)
          echo "Found $RUNNING_COUNT running updates"
          
          if [[ "$RUNNING_COUNT" -gt 1 ]]; then
            echo "::warning::Multiple updates are running, this might cause conflicts"
            echo "running_conflict=true" >> "$GITHUB_OUTPUT"
          else
            echo "running_conflict=false" >> "$GITHUB_OUTPUT"
          fi
          echo "::endgroup::"

      # ‰ºòÂåñÁöÑ‰∏ãËΩΩÁºìÂ≠òÁ≠ñÁï•
      # Âè™ÁºìÂ≠ò‰∏ãËΩΩÁöÑ DMG Êñá‰ª∂ÔºåÈÅøÂÖçÈáçÂ§ç‰∏ãËΩΩÁõ∏ÂêåÁâàÊú¨
      # ‰ΩøÁî® github.sha ‰Ωú‰∏∫ÁºìÂ≠òÈîÆÔºåÁ°Æ‰øùÊØèÊ¨°Êèê‰∫§ÁöÑÁºìÂ≠òÁã¨Á´ã
      - name: Restore download cache
        uses: actions/cache/restore@v4
        id: download-cache
        with:
          path: /tmp/*.dmg
          key: ${{ runner.os }}-lobe-chat-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-lobe-chat-

      - name: Check new version
        id: check
        continue-on-error: true  # ÂÖÅËÆ∏Â§±Ë¥•‰ΩÜ‰∏çÁªàÊ≠¢Êï¥‰∏™Â∑•‰ΩúÊµÅ
        shell: bash
        run: |
          set -xeuo pipefail
          REPO="lobehub/lobe-chat"
          UA="gh-actions-lobe-chat-updater/${GITHUB_RUN_ID}"
          api() { curl --retry 5 --retry-all-errors --retry-delay 2 --connect-timeout 15 -fsSL \
                     -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GH_TOKEN}" -A "$UA" "$1"; }
          TAG=$(api "https://api.github.com/repos/${REPO}/releases/latest" | jq -r .tag_name)
          if [[ -z "${TAG:-}" || "${TAG}" == "null" ]]; then
            echo "update_needed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          NEW_VERSION=${TAG#v}

          CURRENT_VERSION=""
          if [[ -f Casks/lobe-chat.rb ]]; then
            CURRENT_VERSION=$(sed -n 's/^  version "\(.*\)"/\1/p' Casks/lobe-chat.rb | head -n1 || true)
          fi

          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "update_needed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          ARM_URL="https://github.com/${REPO}/releases/download/${TAG}/LobeHub-Beta-${NEW_VERSION}-arm64.dmg"
          INTEL_URL="https://github.com/${REPO}/releases/download/${TAG}/LobeHub-Beta-${NEW_VERSION}-x64.dmg"

          # È¢ÑÊ£Ä HEAD
          curl -IfSL --retry 5 --retry-all-errors --retry-delay 2 -A "$UA" "$ARM_URL" | sed -n '1,20p' || true
          curl -IfSL --retry 5 --retry-all-errors --retry-delay 2 -A "$UA" "$INTEL_URL" | sed -n '1,20p' || true

          # Âπ∂Ë°å‰∏ãËΩΩ‰ª•ÊèêÈ´òÊÄßËÉΩ
          echo "::group::Downloading files in parallel"
          curl -fL --retry 5 --retry-all-errors --retry-delay 2 -A "$UA" -o /tmp/lc-arm.dmg "$ARM_URL" &
          ARM_PID=$!
          curl -fL --retry 5 --retry-all-errors --retry-delay 2 -A "$UA" -o /tmp/lc-intel.dmg "$INTEL_URL" &
          INTEL_PID=$!
          
          # Á≠âÂæÖÊâÄÊúâ‰∏ãËΩΩÂÆåÊàê
          wait $ARM_PID $INTEL_PID
          echo "::endgroup::"
          
          # È™åËØÅ‰∏ãËΩΩÁöÑÊñá‰ª∂
          if [[ ! -f /tmp/lc-arm.dmg ]] || [[ ! -f /tmp/lc-intel.dmg ]]; then
            echo "::error::Download failed - files not found"
            exit 1
          fi
          
          # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
          ARM_SIZE=$(stat -f%z /tmp/lc-arm.dmg 2>/dev/null || stat -c%s /tmp/lc-arm.dmg 2>/dev/null || echo "0")
          INTEL_SIZE=$(stat -f%z /tmp/lc-intel.dmg 2>/dev/null || stat -c%s /tmp/lc-intel.dmg 2>/dev/null || echo "0")
          
          if [[ "$ARM_SIZE" -lt 1000000 ]] || [[ "$INTEL_SIZE" -lt 1000000 ]]; then
            echo "::error::Downloaded files are too small - possible corruption"
            exit 1
          fi
          
          echo "::notice::Files downloaded successfully - ARM: ${ARM_SIZE} bytes, Intel: ${INTEL_SIZE} bytes"

          ARM_SHA=$(shasum -a 256 /tmp/lc-arm.dmg | awk '{print $1}')
          INTEL_SHA=$(shasum -a 256 /tmp/lc-intel.dmg | awk '{print $1}')

          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "new_sha256_arm=$ARM_SHA" >> "$GITHUB_OUTPUT"
          echo "new_sha256_intel=$INTEL_SHA" >> "$GITHUB_OUTPUT"
          echo "update_needed=true" >> "$GITHUB_OUTPUT"
          echo "old_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

      # È™åËØÅÊ£ÄÊü•Ê≠•È™§ÁöÑËæìÂá∫
      - name: Validate check outputs
        if: steps.check.outputs.update_needed == 'true'
        run: |
          if [[ -z "${{ steps.check.outputs.new_version }}" ]]; then
            echo "::error::New version is empty"
            exit 1
          fi
          
          if [[ ! "${{ steps.check.outputs.new_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "::error::Invalid version format: ${{ steps.check.outputs.new_version }}"
            exit 1
          fi
          
          if [[ -z "${{ steps.check.outputs.new_sha256_arm }}" ]]; then
            echo "::error::ARM SHA256 is empty"
            exit 1
          fi
          
          if [[ -z "${{ steps.check.outputs.new_sha256_intel }}" ]]; then
            echo "::error::Intel SHA256 is empty"
            exit 1
          fi
          
          echo "::notice::All outputs validated successfully"

      # ‰øùÂ≠ò‰∏ãËΩΩÁºìÂ≠ò
      - name: Save download cache
        if: |
          always() && 
          steps.download-cache.outputs.cache-hit != 'true' &&
          steps.check.outputs.update_needed == 'true'
        uses: actions/cache/save@v4
        with:
          path: /tmp/*.dmg
          key: ${{ steps.download-cache.outputs.cache-primary-key }}

      - name: Apply updates
        if: |
          steps.check.outputs.update_needed == 'true' &&
          steps.check.outputs.new_version != '' &&
          steps.check.outputs.new_sha256_arm != '' &&
          steps.check.outputs.new_sha256_intel != ''
        env:
          NEW_VERSION: ${{ steps.check.outputs.new_version }}
          NEW_SHA256_ARM: ${{ steps.check.outputs.new_sha256_arm }}
          NEW_SHA256_INTEL: ${{ steps.check.outputs.new_sha256_intel }}
        shell: bash
        run: |
          set -euo pipefail
          OLD_VERSION=$(sed -n 's/^  version "\(.*\)"/\1/p' Casks/lobe-chat.rb || true)
          
          # ËÆ∞ÂΩïÊõ¥Êñ∞ÊëòË¶Å
          echo "::group::Update Summary"
          echo "Cask: lobe-chat"
          echo "Old Version: $OLD_VERSION"
          echo "New Version: $NEW_VERSION"
          echo "ARM SHA256: $NEW_SHA256_ARM"
          echo "Intel SHA256: $NEW_SHA256_INTEL"
          echo "::endgroup::"
          
          # ‰ΩøÁî®Êõ¥Á≤æÁ°ÆÁöÑÂåπÈÖçÊ®°ÂºèÊõ¥Êñ∞ cask Êñá‰ª∂
          sed -i '' "s/^  version \"${OLD_VERSION}\"/  version \"$NEW_VERSION\"/" Casks/lobe-chat.rb
          
          # Êõ¥Êñ∞ ARM SHA256ÔºàÂåπÈÖçÊï¥Ë°åÔºâ
          sed -i '' "s/^  sha256 arm:   \".*\"/  sha256 arm:   \"$NEW_SHA256_ARM\"/" Casks/lobe-chat.rb
          
          # Êõ¥Êñ∞ Intel SHA256ÔºàÂåπÈÖçÊï¥Ë°åÔºâ
          sed -i '' "s/^         intel: \".*\"/         intel: \"$NEW_SHA256_INTEL\"/" Casks/lobe-chat.rb

          NEW_VERSION_DISPLAY=$(echo "$NEW_VERSION" | cut -d',' -f1)
          # ‰ΩøÁî®Êõ¥ÁÆÄÂçïÁöÑ sed ÂëΩ‰ª§Êõ¥Êñ∞ README.mdÔºåÈÅøÂÖçÂ§çÊùÇÁöÑËΩ¨‰πâÂ≠óÁ¨¶
          if grep -q "lobe-chat" README.md; then
            # ÂÖàÂ§á‰ªΩÂéüÊñá‰ª∂
            cp README.md README.md.bak
            # ‰ΩøÁî® awk ËøõË°åÊõ¥ÂÆâÂÖ®ÁöÑÊõøÊç¢
            awk -v version="$NEW_VERSION_DISPLAY" '
            /lobe-chat/ && /ARM64 \+ Intel/ {
              print "| ü§ñ Lobe Chat | `lobe-chat` | " version " | ARM64 + Intel | ‚úÖ | [GitHub](https://github.com/lobehub/lobe-chat) |"
              next
            }
            { print }
            ' README.md > README.md.tmp && mv README.md.tmp README.md
          fi
          
          echo "::notice::Cask file updated successfully"
          echo "::notice::README.md updated successfully"

      - name: Validate
        if: steps.check.outputs.update_needed == 'true'
        shell: bash
        run: |
          ruby -c Casks/lobe-chat.rb
          grep "lobe-chat" README.md | cat

      - name: Commit and push
        if: steps.check.outputs.update_needed == 'true'
        env:
          NEW_VERSION: ${{ steps.check.outputs.new_version }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Casks/lobe-chat.rb README.md
          git commit -m "chore: update Lobe Chat to version ${NEW_VERSION}" -m "- Updated version and checksums" -m "- Source: https://github.com/lobehub/lobe-chat/releases/tag/v${NEW_VERSION}" || exit 0
          git push

      # ÊúÄÁªàÁä∂ÊÄÅÊä•Âëä
      - name: Final status report
        if: always()
        run: |
          echo "::group::Final Status Report"
          echo "Workflow: Update Lobe Chat Cask"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Attempt: ${{ github.run_attempt }}"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ steps.check.outputs.update_needed }}" == "true" ]]; then
            echo "Update: Required and processed"
            echo "Old Version: ${{ steps.check.outputs.old_version }}"
            echo "New Version: ${{ steps.check.outputs.new_version }}"
          else
            echo "Update: Not required or failed"
          fi
          
          if [[ "${{ steps.check-running.outputs.running_conflict }}" == "true" ]]; then
            echo "Conflict: Multiple updates detected"
          fi
          
          echo "::endgroup::"
          
          # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
          rm -f /tmp/lc-*.dmg
          echo "::notice::Temporary files cleaned up"


