name: Update Eudic Cask

on:
  schedule:
    - cron: "24 23 * * *"  # 北京时间 07:24
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: update-eudic
  cancel-in-progress: true

jobs:
  update:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check new version
        id: check
        shell: bash
        run: |
          set -euo pipefail
          FEED_URL="https://static.eudic.net/pkg/eudic_mac.xml"

          CURRENT_VERSION=$(sed -n 's/^\s*version \"\(.*\)\"/\1/p' Casks/eudic.rb)

          feed=$(curl -fsSL "$FEED_URL")
          SHORT=$(printf "%s" "$feed" | grep -Eo 'sparkle:shortVersionString="[0-9]+(\.[0-9]+)+' | head -n1 | sed -E 's/.*="(.*)"/\1/')
          BUILD=$(printf "%s" "$feed" | grep -Eo 'sparkle:version="[0-9]+"' | head -n1 | sed -E 's/.*="(.*)"/\1/')

          if [[ -z "${SHORT:-}" || -z "${BUILD:-}" ]]; then
            echo "未能解析 Eudic 版本，跳过。"
            echo "update_needed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          NEW_VERSION="$SHORT,$BUILD"

          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "已是最新版本：$CURRENT_VERSION"
            echo "update_needed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          URL="https://static.eudic.net/pkg/eudicmac.dmg?v=${BUILD}"
          curl -fSL "$URL" -o /tmp/eudic.dmg
          SHA=$(shasum -a 256 /tmp/eudic.dmg | awk '{print $1}')

          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "new_sha256=$SHA" >> "$GITHUB_OUTPUT"
          echo "new_version_display=$SHORT" >> "$GITHUB_OUTPUT"
          echo "update_needed=true" >> "$GITHUB_OUTPUT"

      - name: Apply updates
        if: steps.check.outputs.update_needed == 'true'
        env:
          NEW_VERSION: ${{ steps.check.outputs.new_version }}
          NEW_SHA256: ${{ steps.check.outputs.new_sha256 }}
          NEW_VERSION_DISPLAY: ${{ steps.check.outputs.new_version_display }}
        shell: bash
        run: |
          set -euo pipefail
          OLD_VERSION=$(sed -n 's/^\s*version \"\(.*\)\"/\1/p' Casks/eudic.rb)

          sed -i '' "s/^\s*version \".*\"/  version \"$NEW_VERSION\"/" Casks/eudic.rb
          sed -i '' "s/^\s*sha256 \".*\"/  sha256 \"$NEW_SHA256\"/" Casks/eudic.rb

          sed -i '' "s/| \`eudic\` | [^|]* |/| \`eudic\` | $NEW_VERSION_DISPLAY |/" README.md

          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV

      - name: Validate
        if: steps.check.outputs.update_needed == 'true'
        shell: bash
        run: |
          ruby -c Casks/eudic.rb
          grep "\`eudic\`" README.md | cat

      - name: Commit and push
        if: steps.check.outputs.update_needed == 'true'
        env:
          NEW_VERSION: ${{ steps.check.outputs.new_version }}
          NEW_VERSION_DISPLAY: ${{ steps.check.outputs.new_version_display }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Casks/eudic.rb README.md
          git commit -m "chore: update Eudic to version ${NEW_VERSION}

- Updated version from ${OLD_VERSION} to ${NEW_VERSION}
- Updated SHA256 checksum
- Updated README.md version table (display ${NEW_VERSION_DISPLAY})
- Source: https://static.eudic.net/pkg/eudic_mac.xml" || exit 0
          git push

name: Update Eudic Cask

on:
  schedule:
    # 每天北京时间上午 9 点检查更新（UTC 时间 1 点）
    - cron: '0 1 * * *'
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-eudic.yml'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new version
        id: check
        run: |
          # 获取当前 cask 中的版本（支持逗号分隔格式）
          CURRENT_VERSION_FULL=$(grep -E 'version "[^"]*"' Casks/eudic.rb | sed -E 's/.*version "(.*)"/\1/')
          CURRENT_VERSION=$(echo "$CURRENT_VERSION_FULL" | cut -d',' -f1)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_FULL" | cut -d',' -f2)
          echo "Current version: $CURRENT_VERSION (build: $CURRENT_BUILD)"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "current_build=$CURRENT_BUILD" >> $GITHUB_OUTPUT

          # 获取当前 cask 中的 SHA256
          CURRENT_SHA256=$(grep -E 'sha256 "[a-f0-9]+"' Casks/eudic.rb | sed -E 's/.*sha256 "(.*)"/\1/')
          echo "Current SHA256: $CURRENT_SHA256"

          # 从 Sparkle 更新源获取最新版本信息
          echo "Checking Eudic Sparkle feed for latest version..."
          SPARKLE_XML=$(curl -s "https://static.eudic.net/pkg/eudic_mac.xml")

          # 从 XML 中提取最新版本信息
          LATEST_VERSION=$(echo "$SPARKLE_XML" | grep -o 'sparkle:shortVersionString="[^"]*"' | head -1 | sed 's/sparkle:shortVersionString="//;s/"//')
          LATEST_BUILD=$(echo "$SPARKLE_XML" | grep -o 'sparkle:version="[^"]*"' | head -1 | sed 's/sparkle:version="//;s/"//')
          LATEST_URL=$(echo "$SPARKLE_XML" | grep -o 'url="[^"]*eudicmac\.dmg[^"]*"' | head -1 | sed 's/url="//;s/"//')

          echo "Latest version: $LATEST_VERSION (build: $LATEST_BUILD)"
          echo "Download URL: $LATEST_URL"

          # 检查是否有新版本
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] || [ "$CURRENT_BUILD" != "$LATEST_BUILD" ]; then
            echo "New version detected: $LATEST_VERSION,$LATEST_BUILD"

            # 下载新版本并计算 SHA256
            echo "Downloading latest version to calculate SHA256..."
            curl -L -o eudic_latest.dmg "$LATEST_URL"
            LATEST_SHA256=$(sha256sum eudic_latest.dmg | cut -d' ' -f1)

            echo "Latest SHA256: $LATEST_SHA256"

            echo "new_version=$LATEST_VERSION,$LATEST_BUILD" >> $GITHUB_OUTPUT
            echo "new_sha256=$LATEST_SHA256" >> $GITHUB_OUTPUT
            echo "update_needed=true" >> $GITHUB_OUTPUT

            # 清理下载的文件
            rm -f eudic_latest.dmg
          else
            echo "Already up to date - no changes needed"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update cask file and README
        if: steps.check.outputs.update_needed == 'true'
        run: |
          NEW_VERSION=${{ steps.check.outputs.new_version }}
          NEW_SHA256=${{ steps.check.outputs.new_sha256 }}
          NEW_VERSION_DISPLAY=$(echo "$NEW_VERSION" | cut -d',' -f1)

          echo "Updating cask file..."
          echo "New version: $NEW_VERSION"
          echo "New SHA256: $NEW_SHA256"
          echo "Display version: $NEW_VERSION_DISPLAY"

          # 更新 cask 文件
          sed -i "s/version \".*\"/version \"$NEW_VERSION\"/" Casks/eudic.rb
          sed -i "s/sha256 \".*\"/sha256 \"$NEW_SHA256\"/" Casks/eudic.rb

          # 更新 README.md 中的版本号
          sed -i "s/| 📚 欧路词典 | \`eudic\` | [^|]* |/| 📚 欧路词典 | \`eudic\` | $NEW_VERSION_DISPLAY |/" README.md

          echo "Cask file and README updated successfully"

      - name: Test updated files
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # 检查 Ruby 语法
          ruby -c Casks/eudic.rb
          echo "Cask syntax is valid"

          # 验证 README.md 更新
          grep "📚 欧路词典" README.md
          echo "README.md updated successfully"

      - name: Commit and push changes
        if: steps.check.outputs.update_needed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add Casks/eudic.rb README.md
          git commit -m "chore: update Eudic to version ${{ steps.check.outputs.new_version }}

          - Updated version from ${{ steps.check.outputs.current_version }},${{ steps.check.outputs.current_build }} to ${{ steps.check.outputs.new_version }}
          - Updated SHA256 checksum
          - Updated README.md version table
          - Source: https://static.eudic.net/pkg/eudic_mac.xml"
          
          git push
